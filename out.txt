3c3
< LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
---
> LRESULT CALLBACK WinProc(HWND hWnd,UINT message,WPARAM wParam,LPARAM lParam);
5c5
< int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
---
> int WINAPI WinMain(HINSTANCE hInst,HINSTANCE hPrevInst,LPSTR lpCmdLine,int nShowCmd)
7c7,20
<     WNDCLASSEX wc = {0};
---
> 	WNDCLASSEX wClass;
> 	ZeroMemory(&wClass,sizeof(WNDCLASSEX));
> 	wClass.cbClsExtra=NULL;
> 	wClass.cbSize=sizeof(WNDCLASSEX);
> 	wClass.cbWndExtra=NULL;
> 	wClass.hbrBackground=(HBRUSH)COLOR_WINDOW;
> 	wClass.hCursor=LoadCursor(NULL,IDC_ARROW);
> 	wClass.hIcon=NULL;
> 	wClass.hIconSm=NULL;
> 	wClass.hInstance=hInst;
> 	wClass.lpfnWndProc=(WNDPROC)WinProc;
> 	wClass.lpszClassName="Window Class";
> 	wClass.lpszMenuName=NULL;
> 	wClass.style=CS_HREDRAW|CS_VREDRAW;
9,52c22,65
< 	//ZeroMemory(&wClass,sizeof(WNDCLASSEX));
< 	//wClass.cbClsExtra=NULL;
< 	//wClass.cbSize=sizeof(WNDCLASSEX);
< 	//wClass.cbWndExtra=NULL;
< 	//wClass.hIcon=NULL;
< 	//wClass.hIconSm=NULL;
< 	//wClass.lpszMenuName=NULL;
< 	//wClass.style=CS_HREDRAW|CS_VREDRAW;
< 	//wClass.hbrBackground=(HBRUSH)COLOR_WINDOW;
< 	
< 	wc.cbSize        = sizeof(wc);
< 	wc.lpszClassName = "versuseMain";
< 	wc.lpszMenuName  = NULL;
<     wc.lpfnWndProc   = WndProc;
< 	wc.style         = CS_HREDRAW | CS_VREDRAW;
< 	wc.hInstance     = hInstance;
< 	wc.cbClsExtra    = 0;
< 	wc.cbWndExtra    = 0;
< 	wc.hIcon         = LoadIcon(NULL, IDI_APPLICATION);
< 	wc.hIconSm       = NULL;
<     wc.hCursor       = LoadCursor(NULL, IDC_ARROW);
< 	wc.hbrBackground = (HBRUSH)COLOR_WINDOW;
< 	
<     if (!RegisterClassEx(&wc)) {
<         MessageBox(NULL, "Window Registration Failed!", "Error! aaaaaaa!", MB_ICONEXCLAMATION | MB_OK);
<         return 0;
<     }
< 	
< 	HWND hwnd = CreateWindowEx(NULL, wc.lpszClassName, "What is this string", 
< 							   WS_OVERLAPPEDWINDOW,
< 							   200, 200, 640, 480, NULL, NULL,
< 							   hInstance, NULL);
< 
<     if (hwnd == NULL) {
<         MessageBox(NULL, "Window Registration Failed!", "Error! aaaaaaa!", MB_ICONEXCLAMATION | MB_OK);
<         return 0;
<     }
< 	
<     MSG Msg;
<     while (GetMessage(&Msg, NULL, 0, 0) > 0) {
<         TranslateMessage(&Msg);
<         DispatchMessage(&Msg);
<     }
<     return (int) Msg.wParam;
---
> 	if(!RegisterClassEx(&wClass))
> 	{
> 		int nResult=GetLastError();
> 		MessageBox(NULL,
> 			"Window class creation failed",
> 			"Window Class Failed",
> 			MB_ICONERROR);
> 	}
> 
> 	HWND hWnd=CreateWindowEx(NULL,
> 			"Window Class",
> 			"Windows application",
> 			WS_OVERLAPPEDWINDOW,
> 			200,
> 			200,
> 			640,
> 			480,
> 			NULL,
> 			NULL,
> 			hInst,
> 			NULL);
> 
> 	if(!hWnd)
> 	{
> 		int nResult=GetLastError();
> 
> 		MessageBox(NULL,
> 			"Window creation failed",
> 			"Window Creation Failed",
> 			MB_ICONERROR);
> 	}
> 
> 	ShowWindow(hWnd,nShowCmd);
> 
> 	MSG msg;
> 	ZeroMemory(&msg,sizeof(MSG));
> 
> 	while(GetMessage(&msg,NULL,0,0))
> 	{
> 		TranslateMessage(&msg);
> 		DispatchMessage(&msg);
> 	}
> 
> 	return 0;
55c68
< LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
---
> LRESULT CALLBACK WinProc(HWND hWnd,UINT msg,WPARAM wParam,LPARAM lParam)
57,61c70,76
< 	static HWND hwndEdit;
<     switch(msg)
<     {   
< 		case WM_RBUTTONDOWN:
< 			MessageBox(hwnd, "Hi", "How ya doin?", MB_OK | MB_ICONINFORMATION);
---
> 	switch(msg)
> 	{
> 		case WM_DESTROY:
> 		{
> 			PostQuitMessage(0);
> 			return 0;
> 		}
63,72c78,80
<         case WM_CLOSE:
<             DestroyWindow(hwnd);
<         break;
<         case WM_DESTROY:
<             PostQuitMessage(0);
<         break;
<         default:
<             return DefWindowProcW(hwnd, msg, wParam, lParam);
<     }
<     return 0;
---
> 	}
> 
> 	return DefWindowProc(hWnd,msg,wParam,lParam);
